{
  // Place your farsight workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Console log": {
    "scope": "javascript,typescript",
    "prefix": "ll",
    "body": [
      "console.log(\"$1\", $2);"
    ],
    "description": "Console log with 1 argument"
  },
  "Jest describe": {
    "scope": "javascript,typescript",
    "prefix": "de",
    "body": [
      "describe(\"$1\", () => {",
      "  $2",
      "});"
    ],
    "description": "Describe block"
  },
  "Jest beforeEach": {
    "scope": "javascript,typescript",
    "prefix": "be",
    "body": [
      "beforeEach(() => {",
      "  $1",
      "});"
    ],
    "description": "Describe block"
  },
  "Jest it": {
    "scope": "javascript,typescript",
    "prefix": "it",
    "body": [
      "it(\"should $1\", () => {",
      "  $2",
      "});"
    ],
    "description": "Should block"
  },
  "Interface": {
    "scope": "typescript",
    "prefix": "int", 
    "body": [
      "export interface $1 {",
      "  $2;",
      "}"
    ]
  },
  "Inject": {
    "scope": "typescript",
    "prefix": "inj",
    "body": [
      "@inject(Types.$1) private _$2: $1;"
    ]
  }
}